{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kathringo/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3057: DtypeWarning: Columns (171) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "#Load our dataframe account for the index columns\n",
    "df = pd.read_csv('case_study.csv', index_col=0)\n",
    "# pd.set_option.display(max_columns=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(34545, 358)"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Quickly check to see the size of our DF, both rows and columns\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_STATE</th>\n",
       "      <th>FMONTH</th>\n",
       "      <th>IDATE</th>\n",
       "      <th>IMONTH</th>\n",
       "      <th>IDAY</th>\n",
       "      <th>IYEAR</th>\n",
       "      <th>DISPCODE</th>\n",
       "      <th>SEQNO</th>\n",
       "      <th>_PSU</th>\n",
       "      <th>CTELENM1</th>\n",
       "      <th>...</th>\n",
       "      <th>_PA300R2</th>\n",
       "      <th>_PA30021</th>\n",
       "      <th>_PASTRNG</th>\n",
       "      <th>_PAREC1</th>\n",
       "      <th>_PASTAE1</th>\n",
       "      <th>_RFSEAT2</th>\n",
       "      <th>_RFSEAT3</th>\n",
       "      <th>_FLSHOT6</th>\n",
       "      <th>_PNEUMO2</th>\n",
       "      <th>_AIDTST3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49938</th>\n",
       "      <td>9.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5172017</td>\n",
       "      <td>5</td>\n",
       "      <td>17</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000001</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49939</th>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2142017</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000002</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49940</th>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1292017</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000003</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49941</th>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>9112017</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000004</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49942</th>\n",
       "      <td>9.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7182017</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000005</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 358 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       _STATE  FMONTH    IDATE  IMONTH  IDAY  IYEAR  DISPCODE       SEQNO  \\\n",
       "49938     9.0     5.0  5172017       5    17   2017    1200.0  2017000001   \n",
       "49939     9.0     2.0  2142017       2    14   2017    1200.0  2017000002   \n",
       "49940     9.0     1.0  1292017       1    29   2017    1200.0  2017000003   \n",
       "49941     9.0     7.0  9112017       9    11   2017    1200.0  2017000004   \n",
       "49942     9.0     5.0  7182017       7    18   2017    1200.0  2017000005   \n",
       "\n",
       "               _PSU  CTELENM1  ...  _PA300R2  _PA30021  _PASTRNG  _PAREC1  \\\n",
       "49938  2.017000e+09       NaN  ...       2.0       2.0       2.0      4.0   \n",
       "49939  2.017000e+09       NaN  ...       1.0       1.0       1.0      1.0   \n",
       "49940  2.017000e+09       NaN  ...       3.0       2.0       1.0      3.0   \n",
       "49941  2.017000e+09       NaN  ...       2.0       2.0       2.0      2.0   \n",
       "49942  2.017000e+09       NaN  ...       2.0       2.0       1.0      1.0   \n",
       "\n",
       "       _PASTAE1  _RFSEAT2  _RFSEAT3  _FLSHOT6  _PNEUMO2  _AIDTST3  \n",
       "49938       2.0       1.0       1.0       NaN       NaN       1.0  \n",
       "49939       1.0       2.0       2.0       NaN       NaN       2.0  \n",
       "49940       2.0       1.0       1.0       NaN       NaN       2.0  \n",
       "49941       2.0       1.0       1.0       NaN       NaN       1.0  \n",
       "49942       1.0       1.0       1.0       NaN       NaN       2.0  \n",
       "\n",
       "[5 rows x 358 columns]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['_STATE', 'FMONTH', 'IDATE', 'IMONTH', 'IDAY', 'IYEAR', 'DISPCODE',\n",
      "       'SEQNO', '_PSU', 'CTELENM1',\n",
      "       ...\n",
      "       '_PA300R2', '_PA30021', '_PASTRNG', '_PAREC1', '_PASTAE1', '_RFSEAT2',\n",
      "       '_RFSEAT3', '_FLSHOT6', '_PNEUMO2', '_AIDTST3'],\n",
      "      dtype='object', length=358)\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "# y = PHYSHLTH"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Subset your dataframe to only include the states in the tri-state area (NJ, CT, NY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36.0    12249\n",
       "34.0    11708\n",
       "9.0     10588\n",
       "Name: _STATE, dtype: int64"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# your code here\n",
    "df = df[df['_STATE'].isin([9.0, 36.0, 34.0])]\n",
    "df['_STATE'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now check to see how large our subset df."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(34545, 358)"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# your code here\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PHYSHLTH** is the column we are interested in for this analysis, so let's start to investigate the column. Since we have a data cookbook, a.k.a. data dictionary) we want to start there before looking at the code. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    34545.000000\n",
       "mean        60.213403\n",
       "std         37.504566\n",
       "min          1.000000\n",
       "25%         15.000000\n",
       "50%         88.000000\n",
       "75%         88.000000\n",
       "max         99.000000\n",
       "Name: PHYSHLTH, dtype: float64"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['PHYSHLTH'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([88.,  2., 28.,  5., 30.,  4.,  3., 77., 15., 29.,  7., 10., 14.,\n",
       "        6.,  1.,  8., 25., 99., 20., 12., 18., 27., 21., 19., 22.,  9.,\n",
       "       13., 17., 11., 16., 24., 26., 23.])"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['PHYSHLTH'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['PHYSHLTH'] == 88., 'PHYSHLTH'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(df[df['PHYSHLTH'].isin([77.0,99.0])].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instructor Solutions\n",
    "# zero_dict = {88:0.\n",
    "#              77: np.nan,\n",
    "#              99: np.nan}\n",
    "\n",
    "# df['PHYSHLTH'] = df['PHYSHLTH'].replace(zero_dict)\n",
    "# df.dropna('PHYSHLTH', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23.0        4\n",
       "24.0        7\n",
       "26.0        7\n",
       "11.0        8\n",
       "19.0       10\n",
       "13.0       10\n",
       "22.0       12\n",
       "9.0        15\n",
       "17.0       15\n",
       "16.0       16\n",
       "18.0       19\n",
       "27.0       22\n",
       "29.0       35\n",
       "28.0       57\n",
       "12.0       69\n",
       "21.0       70\n",
       "8.0        99\n",
       "25.0      159\n",
       "6.0       187\n",
       "14.0      326\n",
       "20.0      402\n",
       "4.0       622\n",
       "15.0      640\n",
       "7.0       641\n",
       "10.0      751\n",
       "5.0      1092\n",
       "3.0      1187\n",
       "1.0      1538\n",
       "2.0      1993\n",
       "30.0     2438\n",
       "0.0     21296\n",
       "Name: PHYSHLTH, dtype: int64"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['PHYSHLTH'].value_counts().sort_values(ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    33747.000000\n",
       "mean         4.085341\n",
       "std          8.513293\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          3.000000\n",
       "max         30.000000\n",
       "Name: PHYSHLTH, dtype: float64"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['PHYSHLTH'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.0"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['PHYSHLTH'].quantile(.90)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Handle the non-normal values\n",
    "\n",
    "As you can see from the data dictionary, there are a number of responses that are coded with values that could throw off our descriptive statistics.  Let's clean up by mapping the responses to a more appropriate value, and handling any missing values.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "#your code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Generate the descriptive statistics\n",
    "\n",
    "Now that our target variable is cleaned up lets calculate the descriptive statistics, generate a graph that quickly shows those statistics, and generate a gprah shows the histogram of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    33747.000000\n",
       "mean         4.085341\n",
       "std          8.513293\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          3.000000\n",
       "max         30.000000\n",
       "Name: PHYSHLTH, dtype: float64"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# descriptive statistics\n",
    "df['PHYSHLTH'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# graphic showing those descriptive stats\n",
    "df['PHYSHLTH'].plot(kind='box');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x125f7ed68>"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# graphic showing the histograph of data\n",
    "df['PHYSHLTH'].plot(kind='hist', bins=7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Generate a graphic that compares the average number of sick days for each state. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>_STATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>3.688562</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.103732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34.0</th>\n",
       "      <td>4.380957</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.923776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36.0</th>\n",
       "      <td>4.148030</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.445330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            mean  median       std\n",
       "_STATE                            \n",
       "9.0     3.688562     0.0  8.103732\n",
       "34.0    4.380957     0.0  8.923776\n",
       "36.0    4.148030     0.0  8.445330"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# code to calculate the average number of sick days by state\n",
    "df.groupby('_STATE')['PHYSHLTH'].agg(['mean', 'median', 'std'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1263d6da0>"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# code to graph those averages using matplotlib\n",
    "mean_by_state = df.groupby('_STATE')['PHYSHLTH'].mean()\n",
    "mean_by_state.plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Turn the number of sick days into a classification of chronically sick people.  \n",
    "\n",
    "Chronically sick people account for a significant proportion of the costs for health insurers. If we can identify what leads people to be chronically sick, we can address them with specific treatments.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25.0"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['PHYSHLTH'].quantile(.92)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "# code to create new colum for chronically sick\n",
    "df['CSICK'] = df['PHYSHLTH'].map(lambda x: 1 if x >= 29 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    33747.000000\n",
       "mean         0.073281\n",
       "std          0.260600\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          0.000000\n",
       "max          1.000000\n",
       "Name: CSICK, dtype: float64"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CSICK'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "_STATE\n",
       "9.0     0.064535\n",
       "34.0    0.083261\n",
       "36.0    0.071320\n",
       "Name: CSICK, dtype: float64"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('_STATE')['CSICK'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dict_state = {9.: 'CT', 34.: 'NJ', 36.: 'NY'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df['_STATE'] = df['_STATE'].map(dict_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Create a graphic that compares the percentage of people labeled as 'chronically sick' in each state. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "# code to calculate averages per state\n",
    "perc_csick_by_state = df.groupby('_STATE')['CSICK'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "_STATE\n",
       "9.0     0.064535\n",
       "34.0    0.083261\n",
       "36.0    0.071320\n",
       "Name: CSICK, dtype: float64"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "perc_csick_by_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a4dd13400>"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create graphic to compare chronically sick by state\n",
    "perc_csick_by_state.plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Independent Variables (categorical)\n",
    "\n",
    "Let's take the column `SMOKDAY2` and start to prepare it so that we can see how it is possibly correlated to `PHYSHLTH`.\n",
    "\n",
    "1. Clean up the values.\n",
    "2. Calculate the descriptive statistics of the variable.\n",
    "3. Generate a histogram for the variable.\n",
    "4. Generate graphics that show how the responses to this variable might differ by state.\n",
    "5. Generate a graphic that compares the physical health of the different groups of 'smokers'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    13468.000000\n",
       "mean         2.524206\n",
       "std          0.843564\n",
       "min          1.000000\n",
       "25%          2.000000\n",
       "50%          3.000000\n",
       "75%          3.000000\n",
       "max          9.000000\n",
       "Name: SMOKDAY2, dtype: float64"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SMOKDAY2'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20279"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SMOKDAY2'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan,  3.,  1.,  2.,  9.,  7.])"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SMOKDAY2'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reading the codebook, these are categorical variables:\n",
    "- 1 : Smoke every day\n",
    "- 2: Smoke some days\n",
    "- 3: Do not smoke (once smoked)\n",
    "- 7 or 9: Not sure or Refused\n",
    "- nan: Not asked or Missing. In this case, SMOKE100, is coded 2, 7, 9, or Missing\n",
    "    - 2: No, have not smoked at least 100 cigarettes in entire life\n",
    "    - 7 or 9: Don't know or refused\n",
    "    - Missing: Not asked or Missing\n",
    "\n",
    "As such, I will encode the new dictionary values as follows:\n",
    "- 1: Frequent Smoker (FS)\n",
    "- 2: Occasional Smoker (OS)\n",
    "- 3: Non-Smoker, Once Smoked (NS-OS)\n",
    "- nan: Non-Smoker (NS)\n",
    "- 7 or 9: Drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "smoker_dict = {np.nan: 'Non-Smoker',\n",
    "               1.: 'Frequent Smoker',\n",
    "               2.: 'Occasional Smoker',\n",
    "               3.: 'Non-Smoker Once Smoked',\n",
    "               7.: np.nan,\n",
    "               8.: np.nan}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49938    NaN\n",
       "49939    NaN\n",
       "49940    NaN\n",
       "49941    NaN\n",
       "49942    3.0\n",
       "Name: SMOKDAY2, dtype: float64"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SMOKDAY2'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['SMOKER'] = df['SMOKDAY2'].map(smoker_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Non-Smoker                0.601394\n",
       "Non-Smoker Once Smoked    0.281554\n",
       "Frequent Smoker           0.077432\n",
       "Occasional Smoker         0.039620\n",
       "Name: SMOKER, dtype: float64"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SMOKER'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SMOKER'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['SMOKER'].dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SMOKER'].isna().sum() #check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1204e89e8>"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.barplot(x=df['CSICK'], y=df['SMOKER'])#, hue=df['_STATE'])\n",
    "# plt.bar(x=df['SMOKER'], height=df['CSICK'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Independent Variables (continuous):\n",
    "\n",
    "Now let's look at a continuous variable (ALCDAY5) and see how that might impact a person's health. \n",
    "\n",
    "1. Clean up the values.\n",
    "2. Calculate the descriptive statistics of the variable.\n",
    "3. Generate a histogram for the variable.\n",
    "4. Generate graphics that show how the responses to this variable might differ by state.\n",
    "5. Calculate the correlation coefficient between `PHYSHLTH` and `ALCDAY5`.\n",
    "5. Generate a graphic that shows the possible relationship between `PHYSHLTH` and `ALCDAY5`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    31922.000000\n",
       "mean       468.457177\n",
       "std        350.129601\n",
       "min        101.000000\n",
       "25%        201.000000\n",
       "50%        212.000000\n",
       "75%        888.000000\n",
       "max        999.000000\n",
       "Name: ALCDAY5, dtype: float64"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ALCDAY5'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question: During the past 30 days, how many days per week or per month \n",
    "          did you have at least one drink of any alcoholic beverage such \n",
    "          as beer, wine, a malt beverage or liquor?\n",
    "          \n",
    "The answers are encoded in the following ways:\n",
    " - 101 - 107 (days per week)\n",
    " - 201 - 230 (days per month)\n",
    " - 888: No drinks\n",
    " - 777, 999, blank = missing\n",
    " \n",
    " As such, I will re-map the values in the column as follows:\n",
    " - 101: 1*4 (weeks per month, approx) = 4\n",
    " - 102: 2*4 = 8\n",
    " - 103: 12\n",
    " - 104: 16\n",
    " - 105: 20\n",
    " - 106: 24\n",
    " - 107: 28\n",
    " - 201: 1\n",
    " - 202: 2\n",
    " - continue to\n",
    " - 230: 30\n",
    " - 888: 0\n",
    " - 777: np.nan\n",
    " - 999: np.nan\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "alch_dict = {101.: 4,\n",
    "            102.: 8,\n",
    "            103.: 12,\n",
    "            104.: 16,\n",
    "            105.: 20,\n",
    "            106.: 24,\n",
    "            107.: 28,\n",
    "            201.: 1,\n",
    "            202.: 2,\n",
    "            203.: 3,\n",
    "            204.: 4,\n",
    "            205.: 5,\n",
    "            206.: 6,\n",
    "            207.: 7,\n",
    "            208.: 8,\n",
    "            209.: 9,\n",
    "            210.: 10,\n",
    "            211.: 11,\n",
    "            212.: 12,\n",
    "            213.: 13,\n",
    "            214.: 14,\n",
    "            215.: 15,\n",
    "            216.: 16,\n",
    "            217.: 17,\n",
    "            218.: 18,\n",
    "            219.: 19,\n",
    "            220.: 20,\n",
    "            221.: 21,\n",
    "            222.: 22,\n",
    "            223.: 23,\n",
    "            224.: 24,\n",
    "            225.: 25,\n",
    "            226.: 26,\n",
    "            227.: 27,\n",
    "            228.: 28,\n",
    "            229.: 29,\n",
    "            230.: 30,\n",
    "            888.: 0,\n",
    "            777.: np.nan,\n",
    "            999.: np.nan,\n",
    "            np.nan: np.nan}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "888.0    12631\n",
       "201.0     2968\n",
       "202.0     2300\n",
       "101.0     1565\n",
       "203.0     1323\n",
       "102.0     1217\n",
       "230.0     1148\n",
       "205.0     1147\n",
       "204.0     1132\n",
       "210.0      834\n",
       "103.0      773\n",
       "107.0      697\n",
       "220.0      641\n",
       "215.0      585\n",
       "206.0      385\n",
       "104.0      380\n",
       "208.0      363\n",
       "105.0      346\n",
       "207.0      276\n",
       "225.0      263\n",
       "777.0      209\n",
       "999.0      181\n",
       "212.0      142\n",
       "106.0      109\n",
       "228.0       56\n",
       "214.0       51\n",
       "229.0       31\n",
       "209.0       26\n",
       "227.0       24\n",
       "218.0       18\n",
       "216.0       15\n",
       "226.0       15\n",
       "224.0       14\n",
       "222.0       13\n",
       "221.0       13\n",
       "213.0       11\n",
       "211.0       10\n",
       "217.0        7\n",
       "223.0        2\n",
       "219.0        1\n",
       "Name: ALCDAY5, dtype: int64"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ALCDAY5'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ALCH'] = df['ALCDAY5'].map(alch_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    31532.000000\n",
       "mean         5.339116\n",
       "std          8.194317\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          2.000000\n",
       "75%          7.000000\n",
       "max         30.000000\n",
       "Name: ALCH, dtype: float64"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ALCH'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a4da34b00>"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['ALCH'].plot(kind='box')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20.0"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ALCH'].quantile(.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a4daeab70>"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['ALCH'].plot(kind='hist', bins=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ALCH_CAT'] = df['ALCH'].map(lambda x: 'Heavy Drinker' if x > 10 else ('Non-Drinker' if x == 0 else 'Occasional Drinker'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Occasional Drinker    0.466738\n",
       "Non-Drinker           0.374285\n",
       "Heavy Drinker         0.158977\n",
       "Name: ALCH_CAT, dtype: float64"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ALCH_CAT'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x127b8f940>"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['ALCH_CAT'], y=df['CSICK'], hue=df['SMOKER'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2215"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ALCH'].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ALCH'].dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_STATE</th>\n",
       "      <th>FMONTH</th>\n",
       "      <th>IDATE</th>\n",
       "      <th>IMONTH</th>\n",
       "      <th>IDAY</th>\n",
       "      <th>IYEAR</th>\n",
       "      <th>DISPCODE</th>\n",
       "      <th>SEQNO</th>\n",
       "      <th>_PSU</th>\n",
       "      <th>CTELENM1</th>\n",
       "      <th>...</th>\n",
       "      <th>_PASTAE1</th>\n",
       "      <th>_RFSEAT2</th>\n",
       "      <th>_RFSEAT3</th>\n",
       "      <th>_FLSHOT6</th>\n",
       "      <th>_PNEUMO2</th>\n",
       "      <th>_AIDTST3</th>\n",
       "      <th>CSICK</th>\n",
       "      <th>SMOKER</th>\n",
       "      <th>ALCH</th>\n",
       "      <th>ALCH_CAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49938</th>\n",
       "      <td>9.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5172017</td>\n",
       "      <td>5</td>\n",
       "      <td>17</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000001</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Non-Smoker</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Occasional Drinker</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49939</th>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2142017</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000002</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Non-Smoker</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Heavy Drinker</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49940</th>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1292017</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000003</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Non-Smoker</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Non-Drinker</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49941</th>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>9112017</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000004</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Non-Smoker</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Heavy Drinker</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49942</th>\n",
       "      <td>9.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7182017</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>2017</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>2017000005</td>\n",
       "      <td>2.017000e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Non-Smoker Once Smoked</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Occasional Drinker</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 362 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       _STATE  FMONTH    IDATE  IMONTH  IDAY  IYEAR  DISPCODE       SEQNO  \\\n",
       "49938     9.0     5.0  5172017       5    17   2017    1200.0  2017000001   \n",
       "49939     9.0     2.0  2142017       2    14   2017    1200.0  2017000002   \n",
       "49940     9.0     1.0  1292017       1    29   2017    1200.0  2017000003   \n",
       "49941     9.0     7.0  9112017       9    11   2017    1200.0  2017000004   \n",
       "49942     9.0     5.0  7182017       7    18   2017    1200.0  2017000005   \n",
       "\n",
       "               _PSU  CTELENM1  ...  _PASTAE1  _RFSEAT2  _RFSEAT3  _FLSHOT6  \\\n",
       "49938  2.017000e+09       NaN  ...       2.0       1.0       1.0       NaN   \n",
       "49939  2.017000e+09       NaN  ...       1.0       2.0       2.0       NaN   \n",
       "49940  2.017000e+09       NaN  ...       2.0       1.0       1.0       NaN   \n",
       "49941  2.017000e+09       NaN  ...       2.0       1.0       1.0       NaN   \n",
       "49942  2.017000e+09       NaN  ...       1.0       1.0       1.0       NaN   \n",
       "\n",
       "       _PNEUMO2  _AIDTST3  CSICK                  SMOKER  ALCH  \\\n",
       "49938       NaN       1.0      0              Non-Smoker   4.0   \n",
       "49939       NaN       2.0      0              Non-Smoker  30.0   \n",
       "49940       NaN       2.0      0              Non-Smoker   0.0   \n",
       "49941       NaN       1.0      0              Non-Smoker  12.0   \n",
       "49942       NaN       2.0      0  Non-Smoker Once Smoked   4.0   \n",
       "\n",
       "                 ALCH_CAT  \n",
       "49938  Occasional Drinker  \n",
       "49939       Heavy Drinker  \n",
       "49940         Non-Drinker  \n",
       "49941       Heavy Drinker  \n",
       "49942  Occasional Drinker  \n",
       "\n",
       "[5 rows x 362 columns]"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ALCH_CAT'] = df['ALCH'].map(lambda x: 'Heavy Drinker' if x > 10 else ('Non-Drinker' if x == 0 else 'Occasional Drinker'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12837eef0>"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['ALCH_CAT'], y=df['CSICK'], hue=df['SMOKER'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1207de710>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['MARITAL'], y=df['CSICK'], hue=df['SMOKER'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x120f61860>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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jgji5JRTTuHNN99k+/btcd/2sGHDuOOOO8jMzGTt2rUMHTo07vs4WgcPHizuEEQkTpQI4qR06dIMGDAgZhXOTZs20bZtWxo2bEjbtm3DZRr69evHsGHDaN68Oeeeey6vv/56zG1v3bqVWrVqhadTUlKA0INjunTpQseOHUlOTmbChAmMGzeORo0a0bRpU7777jsgVHKiadOmNGzYkGuvvZbvv/8+z/YPP3TmgQceAGD27Nk0a9aMtLQ0unXrxp49ewCoW7cuo0aN4vLLL+e11147xh4TkROFEkEcDR48mGnTprFr164884cMGUKfPn1YtWoVvXr1Cj/NC0If8gsWLODdd9/lN7854rHOANxxxx1ceeWVXH311YwfP56dO3eGl3322WdMnz6dxYsXc//991OhQgVWrFhBs2bNwneF9unTh8cff5xVq1aRkpLCww8/HF4/JyeHXr16Ub9+fUaPHs327dsZPXo0c+bMYfny5aSnpzNu3Lhw+3LlyrFgwQJ69OgRlz4TkeKnRBBHp556Kn369OGpp57KM//vf/87N94YqsDdu3dvFixYEF7WpUsXSpUqxUUXXcS//vWvmNu9+eabWbt2Ld26dWPevHk0bdqU/fv3A6F6P5UrV6Z69epUqVKFjh07AqGjho0bN7Jr1y527tzJFVdcAUDfvn2ZP39+eNsDBw6kQYMG3H///QAsWrSINWvW0KJFC1JTU3n55ZfZtGlTuH3k8wxE5OSgRBBnv/71r3nxxRf5z3/+k2+byGcAHH6qGBB+VvD9998ffuDLYWeffTb9+/fnnXfeoXTp0nz22WdHrF+qVKnwdKlSpcjJySk03ubNmzN37lx++OGHcAzt2rUjMzOTzMxM1qxZw4svvhhuX7FixUK3KSIlixJBnFWtWpUbbrghz4dn8+bNw4+LnDZtGpdffnmB23j00UfDH8QQetLXgQMHgNDzZHfs2EHNmjWLFE+VKlU4/fTTwxVDp06dGj46ALjlllvo0KED3bp1Iycnh6ZNm7Jw4UI2bNgAwN69e/niiy+K+O5FpCQ6KS8fLcrlnkG66667mDBhQnj6qaeeon///owdO5bq1aszefLko9re7NmzGT58OOXKlQNCD34566yzirz+yy+/zG233cbevXs599xzj9j/nXfeya5du+jduzfTpk1jypQp9OzZMzz8NHr0aOrXr39UMYtIyRFoGWozaw/8DkgCXnD3x6KWjwfa5E5WAM5099MK2qbKUEtJVVL+TlWG+uRUUBnqwI4IzCwJmAi0I/Qg+yVmNtPd1xxu4+53RLQfCjQKKh4REYktyHMETYAN7v6lu/8IzAA6F9C+J6HnFouIyHEUZCKoCWyOmM7OnXcEM6sDJAMfBRiPiIjEEGQisBjz8jsh0QN43d1j1i0wswFmttTMln777bdxC1BERIJNBNnAORHTtYCv82nbgwKGhdx9krunu3t69erV4xiiiIgEmQiWAPXMLNnMyhL6sJ8Z3cjMzgdOB/4eYCwiIpKPwK4acvccMxsCvE/o8tGX3D3LzEYBS939cFLoCczwOF7H+tWolHhtCoDaD64utI3KUMOkSZPCdYlOPfVUxo0bV+jNc8di0aJFDB8+nP3797N//366d+8el/6uW7cuS5cupVq1ake97pQpU1i6dGme+0hETnSB3lDm7rOAWVHzHoyaHhlkDMfL4TLU991330/6ACnI4TLUnTuHLrpavbrwxBS0gwcPkpSUFJ5+9913ee6551iwYAHVqlVj+fLldOnShcWLFx/VzW9Ho2/fvrz66qtccsklHDx4kHXr1gWyH5GTnUpMxEmil6F+/PHHGTt2bDgJpqWl0bdvXyZOnBhe96GHHiItLY2UlBQ+//xzAPbs2cPNN99MSkoKDRs25I033igwhkjffPMNNWrUACApKYmLLroIgJEjR9K3b18yMjKoW7cub775JiNGjCAlJYX27duHy3V8+OGHNGrUiJSUFPr37x++k/qwffv20b59e55//nkA/vjHP9KkSRNSU1MZOHBg+JkMkydPpn79+lxxxRUsXLgw5r+hyIlMiSCOErkMdVZWFpdeemmeeenp6WRlZYWnDx8p3H777TzxxBMAPPLII1SpUoXVq1ezatUqrrzyykJjiOyX888/n2uvvZbnnnsuXDgP4B//+Afvvfce77zzDjfddBNt2rRh9erVlC9fnvfee48ffviBfv368corr7B69WpycnJ49tlnw+vv2bOHjh07cuONN3Lrrbeydu1aXnnlFRYuXEhmZiZJSUlMmzaNrVu38tBDD7Fw4UI++OAD1qxZc0ScIic6JYI4UhnqvNw9T6XVrl27AnDppZeyceNGAObMmcPgwYPDbU4//fRCYzjswQcfZOnSpWRkZDB9+nTat28fXnb11VdTpkwZUlJSOHjwYHjZ4X5Zt24dycnJ4RpK0f3SuXNnbr75Zvr0CdWt+vDDD1m2bBmNGzcmNTWVDz/8kC+//JJPP/2U1q1bU716dcqWLasy3VIiKRHEWaKWob7oootYtmxZnnnLly8PD9dExpqUlBSOLTpZFCWGSOeddx633347H374IStXrmTHjh159lWqVCnKlCkT3sfhfins2oQWLVrwl7/8JdzO3enbt284pnXr1oVPTEfHL1LSKBHEWaKWoR4xYgT33ntv+IM4MzOTKVOmMGjQoALXy8jIyHOFzffff1/kGN57773wB/X69etJSkritNMKrFkYdsEFF7Bx48bwPqL7ZdSoUZxxxhnh+Nu2bcvrr7/ON998A8B3333Hpk2buOyyy5g3bx47duzgwIEDeoSnlEgnZRnqolzuGaRELEPdqVMntmzZQvPmzTEzKleuzB//+Mfwydz8PPDAAwwePJgGDRqQlJTEQw89RNeuXYsUw9SpU7njjjuoUKECpUuXZtq0aXmuZCpIuXLlmDx5cjgBNm7cmNtuuy1PmyeffJL+/fszYsQIxowZw+jRo8nIyODQoUOUKVOGiRMn0rRpU0aOHEmzZs2oUaMGaWlp4ZPIIiVFoGWog6Ay1FJSlZS/U5WhPjkVVIZaQ0MiIglOiUBEJMEpEYiIJDglAhGRBKdEICKS4JQIREQS3El5H0GLp1vEdXsLhxZeSCwpKSlcDA7g7bffpm7dunGN41g9+eSTDBgwgAoVKhyx7N133+V//ud/OHToEAcOHGD48OEMHDjwmPdZqVKlmAXjROTEcVImguJQvnz58J3AseTk5FC6dPF295NPPslNN910RCI4cOAAAwYMYPHixdSqVYv9+/eHawEVF3fH3SlVSgetIkHT/7IATZkyhW7dutGxY0cyMjKA0F3BjRs3pmHDhjz00EPhto8++ijnn38+v/jFL+jZs2e4Omfr1q05fAPd9u3bw0cZBw8e5J577glv67nnngNg3rx5tG7dmuuvv54LLriAXr164e489dRTfP3117Rp04Y2bdrkiXP37t3k5ORwxhlnAKE6Peeffz4QKpV9++2306ZNG84991w+/vhj+vfvz4UXXki/fv3C2/jTn/5ESkoKDRo04N577z2iL7Zv306zZs1477338u2HjRs3cuGFFzJo0CDS0tLYvHnzMfW/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Ql588cUC3+cdd9zBlVdeydVXX8348ePZufO/N4B/9tlnTJ8+ncWLF3P//fdToUIFVqxYQbNmzcJ3p/bp04fHH3+cVatWkZKSwsMPPxxePycnh169elG/fn1Gjx7N9u3bGT16NHPmzGH58uWkp6czbty4cPty5cqxYMECevTocbT/XCISRYkgDtw9ZvXQw/PnzJnDbbfdFq7SWbVqVdatW0eNGjVo3LgxEEocpUuX5sCBA9x6662kpKTQrVs31qwJFWtt3LgxkydPZuTIkaxevZrKlSvn2deCBQu49tprqVixIpUqVaJr167ho4bk5ORw4rj00kvDTx/77LPPaNmyJSkpKUybNo2srKwC3+fNN9/M2rVr6datG/PmzaNp06bs378fgDZt2lC5cmWqV69OlSpV6NixIxA6ati4cSO7du1i586d4WJ0ffv2Zf78+eFtDxw4kAYNGoSH0xYtWsSaNWto0aIFqampvPzyy2zatCncvnv37oX9s4hIESkRxMHFF19MdP2jf//732zevJnzzjsvZqLIL3mMHz+en/3sZ6xcuZKlS5fy448/AtCqVSvmz59PzZo16d279xE1YAqqGZVfWep+/foxYcIEVq9ezUMPPZSnzHV+zj77bPr3788777xD6dKl+eyzz47YR2S56sOlqgvTvHlz5s6dG47B3WnXrh2ZmZlkZmayZs2aPEcsKlctEj9KBHHQtm1b9u7dG/5wPnjwIHfddRf9+vWjQoUKZGRk8Pvf/z78gfjdd99xwQUX8PXXX7NkyRLgv4+L3LVrFzVq1KBUqVJMnTo1fDJ006ZNnHnmmdx6663ccsstLF++PE8MrVq14u2332bv3r385z//4a233spTxTSW3bt3U6NGDQ4cOMC0adMKfZ9//etfw2Wvt23bxo4dO6hZs2aR+qhKlSqcfvrp4aOUqVOnho8OAG655RY6dOhAt27dyMnJoWnTpixcuJANGzYAsHfvXr744osi7UtEjs5JefloUS73jCcz46233mLQoEE88sgjHDp0iA4dOvDb3/4WCJWM/uKLL2jYsCFlypTh1ltvZciQIbzyyisMHTqUffv2Ub58eebMmcOgQYO47rrreO2112jTpk34m++8efMYO3YsZcqUoVKlSkccEaSlpdGvXz+aNGkS3mejRo0KfAj9I488wmWXXUadOnVISUmJ+ayCSLNn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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x11cbe4438>"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data = df, x='ALCH', y='PHYSHLTH')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Additional variables: Choose two additional survey items you would like to investigate do steps  6 or 7 for those variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise in the Past 30 Days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x120f6a978>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# your code here\n",
    "sns.barplot(x=df['EMPLOY1'], y=df['CSICK'])#, hue=df['SMOKER'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Marital Status as a proxy for age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x123369898>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['EDUCA'], y=df['CSICK'])#, hue=df['SMOKER'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question: Have you EVER been told by a doctor, nurse or other health professional that you have high blood pressure?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11df95710>"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Ap7Ko1u2bKF27dosXryYXbt2sXbtWpxz9OjRg5UrV3L++eezcOFCNm3aREZGBrGxsflKOuc1e/Zsatasybp16zh9+jQJCQm+ZLNp0yZSUlK45JJLSEhIYPXq1YwfP55p06axbNmyfDfOqV27Nj169KBx48Z07tyZm2++mQEDBvj+Gj9y5AifffYZH3zwAd27d2f16tX87W9/o1WrViQnJ3PxxRfz4IMPsmHDBi688EISExN577336NWrFwDff/89PXr0YPLkydx4442Fvg+NGjVi586dzJkzh7/+VVNKRMqKEkEpKWxo6MYbb6R27dqAp2bQ4sWLadGiBeCpeb9r1y6OHz9O7969fUM2PXr0KPL1Fi9ezJYtW3w3szl27Bi7du2iSpUqtG7d2ncjm5iYGFJTU4ssdPe3v/2NrVu3smTJEp5++mk+/fRT5s6dC0D37t0xM6Kjo/nVr37lOxdyzTXXkJqayp49e3ylmAEGDhzIypUr6dWrF+np6XTu3JnnnnvOV9StsPehUaNGNG7cmPj4+CL7LyKlR4nAz3KWbXbO8dBDD+U7CTtjxoxCSxmHh4eTlZUFkOvGK845nn32WW666aZc7ZcvX56rNHXOks9FiY6OJjo6mkGDBhEVFeVLBDlLOucte13UuY/w8HBatmzJJ5984ksEhb0PqamphZa5FhH/0Zm4MnTTTTfx8ssv+66i2bdvHwcPHqR9+/a8++67nDp1iuPHj/N///d/vudERkb66vznvJXlTTfdxPPPP+8rT/3111+f8R4IADVq1OD48eP51p84cYLly5f7lpOTk2ncuHGx+3XdddexYsUKDh06RGZmJq+//rrvS9/MePnll/nqq6/485//fMb3QSTUJSUlMXjwYJKSksr0dSvkEUFxLvcMhMTERHbs2EGbNm0Az6WVr732GrGxsfTr14+YmBgaN25Mu3btfM+5//77ue2225g3bx6dOnXyrf/d735HamoqsbGxOOeoW7cu77333hlff+TIkXTt2pX69euzbNky33rnHFOmTGHUqFFUrVqV888/33c0UBz169fnT3/6Ex07dsQ5R7du3ejZs6dve1hYGAsXLqR79+5ccMEFjBkzpsD3obglpEUqqkDNnFYZ6nJo0qRJVK9enfvvvz/QoUgpqmif00AoSWnpYCxD7c+YA1aGWkREyr8KOTQU7LLvhSsi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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['BPHIGH4'], y=df['CSICK'], hue=df['SMOKER'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question: (Ever told) you had a heart attack, also called a myocardial infarction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11de8ccc0>"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['CVDINFR4'], y=df['CSICK'], hue=df['SMOKER'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x123984390>"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['INCOME2'], y=df['CSICK'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['INCOME2'].isin([77., 99.]),'INCOME2'] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['INCOME2'].dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x123aa0978>"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df['INCOME2'], y=df['CSICK'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x123aa0940>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data=df, x='INCOME2', y='PHYSHLTH')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Based on your initial data exploration, what are some hypotheses of what affects a person's health that you would like to further investigate?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Type out your initial hyptotheses below:\n",
    "\n",
    "1. \n",
    "\n",
    "2. \n",
    "\n",
    "3.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus: Create some cool graphics.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ALCDAY5'].map(lambda x: (x - 100) if (0 < x < 110), else ((x - 200)/4.2 if (110<x<250), else x)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
